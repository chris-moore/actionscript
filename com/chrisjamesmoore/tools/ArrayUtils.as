package com.chrisjamesmoore.tools {		/**	 *	[ArrayUtils]	 * 	 *	@author			Chris Moore	 *	@author			Jason Cook	 *	@version		1.0.6	 *	@date			Sep 20, 2012	 *	@client					 *	@project	 *	@producer	 *	@langversion	ActionScript 3.0	 *	@playerversion	Flash Player 10	 *	 *  @history 1.0.6 (2012.09.20) Ported class to com.chrisjamesmoore package for github repository.	 *	@history 1.0.5 (2009.11.18) Refactored for AS3 Framework.	 *	@history 1.0.4 (2008.09.22) Ported class to AS3.	 *  @history 1.0.3 (2007.02.08) Ported class to com.tuesday package.	 *  @history 1.0.2 (2007.01.19) Added removeFromArray.	 *  @history 1.0.1 (2006.11.30) Added wrapArray.	 *  @history 1.0.0 (2006.11.20) Wrote initial version of ArrayUtils.	 */	public class ArrayUtils {			//--------------------------------------------------		// PUBLIC STATIC PROPERTIES		//--------------------------------------------------				/**		 *	The fully qualifed class name and path. This can be accessed from the class but the value		 * 	can also be retrieved from the instance using the getter fullyQualifedClassPath		 */		public static var FULLY_QUALIFIED_CLASS_PATH: String = "com.chrisjamesmoore.tools.ArrayUtils";				//--------------------------------------------------		// PRIVATE STATIC PROPERTIES		//--------------------------------------------------				//--------------------------------------------------		// PUBLIC PROPERTIES		//--------------------------------------------------				//--------------------------------------------------		// PRIVATE PROPERTIES		//--------------------------------------------------				//--------------------------------------------------		// CONSTRUCTOR		//--------------------------------------------------				/**		 *	Constructor		 */		public function ArrayUtils() {}				//--------------------------------------------------		// GETTERS / SETTERS		//--------------------------------------------------				/**		 *	Returns the fully qualified class path which includes the class package and class name as a string		 *	@return	-	String representing the full class path.		 *						For example: com.chrisjamesmoore.tools.ArrayUtils		 */		public function get fullyQualifiedClassPath(): String		{			return  ArrayUtils.FULLY_QUALIFIED_CLASS_PATH;		}				//--------------------------------------------------		// EVENT HANDLERS		//--------------------------------------------------				//--------------------------------------------------		// PUBLIC METHODS		//--------------------------------------------------				/**		 * Searches through a numbered array for an object and returns the first index found that matches.		 * @param	a		(Array) The array to search.		 * @param	value	(Object) Object to search for in the array.		 * @since 1.0.0		 * @return			(Number) The index of the first occurrence of the object if found, -1 if not found.		 */		public static function indexOf(a:Array, value:Object):Number 		{			for (var i:Number = 0; i < a.length; i++) {				if (a[i] === value) {										return i;				}			}						return -1;		}			/**		 * Searches through a named array for an object and returns the first key that matches the value. Since named arrays are inherently unordered, there is no method provided to search the last index of a named array.		 * @param	a		(Array) The array to search.		 * @param	value	(Object) Object to search for in the array.		 * @since 1.0.0		 * @return			(String) The key of the first occurrence of the object if found, null if not found.		 */		public static function indexOfName(a:Array, value:Object):String 		{			for (var i:String in a) {				if (a[i] === value) {					return i;				}			}			return null;		}			/**		 * Searches through a numbered array for an object and returns the last index found that matches.		 * @param	a		(Array) The array to search.		 * @param	value	(Object) Object to search for in the array.		 * @since 1.0.0		 * @return			(Number) The index of the first occurrence of the object if found, -1 if not found.		 */		public static function lastIndexOf(a:Array, value:Object):Number 		{			for (var i:Number = a.length-1; i >= 0; i--) {				if (a[i] === value) {					return i;				}			}			return -1;		}				/**		 * Moves the selected item to index 0 and unshifts the remaining items.		 * @param	a		(Array) The array to process.		 * @param	index	(Number) The index of the first item to move to the front.		 * @since 1.0.0		 * @return			(Array) A copy of the array with the item moved to the front.		 */		public static function moveToFront(a:Array, index:Number):Array 		{				var temp_one:Array = a[index];			var temp_two:Array = remove(a, index);			temp_two.unshift(temp_one);			return (temp_two);					}				private static function remove(init_array:Array, index:Number):Array 		{ 		   		var temp_one:Array = [];	   		var temp_two:Array = [];	   		temp_one = init_array.slice(0, index);	    	temp_two = init_array.slice(index + 1, init_array.length);	    	return temp_one.concat(temp_two);	    }			/**		 * Returns a randomized copy of a numbered array.		 * @param	a		(Array) The array to randomize.		 * @since 1.0.0		 * @return			(Array) A randomized copy of the array.		 */		public static function randomize(a:Array):Array 		{			var i:Number = a.length;			if (i == 0) {				return null;			}			while (--i) {				var j:Number = Math.floor(Math.random() * (i + 1));				var tmp1:Object = a[i];				var tmp2:Object = a[j];				a[i] = tmp2;				a[j] = tmp1;			}			return a;		}			/**		 * Remove an item from a numbered array. This method can also remove an array from a multidimentional array.		 * @param	a		(Array) The array containing the item to remove.		 * @param	rem		(String) The item to remove.		 * @since 1.0.2		 * @return			(Array) A copy of the array with the item removed.		 */		public static function removeFromArray(arr:Array, rem:Object):Array 		{			for(var i:Number = 0; i < arr.length; i++) {				if(arr[i] == rem) {					arr.splice(i,1);				} else if(arr[i].length > 0) {					arr[i].remove(rem);				}			}			return arr;		}				/**		 * Duplicates a numbered Array.		 * @param	arr		(Array) The array to be copied.		 * @since 1.0.2		 * @return			(Array) A copy of the array.		 */		public static function duplicateArray(arr:Array):Array 		{			var new_arr:Array = [];			for(var i:Number = 0; i < arr.length; i++) {				new_arr.push(arr[i]);			}			return new_arr;		}				/**		 * Converts an Object to an Array.		 * @param	arr		(Array) The array to be copied.		 * @since 1.0.2		 * @return			(Array) A copy of the array.		 */		public static function objectToArray(arr:Object):Array 		{			var new_arr:Array = [];			for(var i:String in arr) {				new_arr.push(arr[i]);			}			return new_arr;		}				/**		 * Returns a copy of a numbered array with duplicate items removed.		 * @param	a		(Array) The array to process.		 * @since 1.0.0		 * @return			(Array) A copy of the array with the duplicate items removed.		 */		public static function stripDuplicates(a:Array):Array 		{			if (arguments.length != 1) {				return a;			}			var newArray:Array = [];			for (var i:String in a) {				var n:Number = 0;				for (var j:String in newArray) {					if (newArray[j] == a[i]) {						n++;					}				}				if (n < 1) {					newArray.push(a[i]);				}			}			newArray.reverse();			return newArray;		}				/**		 * Swaps the indices of two items in a numbered array.		 * @param	a		(Array) The array to process.		 * @param	index1	(Number) The index of the first item to swap.		 * @param	index2	(Number) The index of the second item to swap.		 * @since 1.0.0		 * @return			(Array) A copy of the array with the two items swapped.		 */		public static function swap(a:Array, index1:Number, index2:Number):Array 		{			var temp_one:Array = a[index1];			a[index1] = a[index2];			a[index2] = temp_one;			return a;		}				/**		 * Returns an array with the specified number of elements. Counting Wraps around the end and the beginning for cyclical behavior.		 * @param	a			(Array) The array to process.		 * @param	startIndex	(Number) The index in the array to begin counting from.		 * @param	cap			(Number) The number of elements to return.		 * @since 1.0.1		 * @return				(Array) An array of length <code>cap</code>, started from item <code>startIndex</code> that may have been wrapped around the start or end of the original array <code>a</code>.		 */		public static function wrapArray(a:Array, startIndex:Number, cap:Number):Array 		{			var returnArray:Array = [];						for (var i:Number = 0; i < cap; i++) {				var newIndex:Number = i + startIndex;								if (newIndex < 0) {					newIndex = (newIndex + a.length) % a.length;				} else if (newIndex >= a.length) {					newIndex %= a.length;				}								returnArray.push(a[newIndex]);			}						return(returnArray);		}	}}